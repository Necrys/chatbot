package commands

import "../CmdProcessor"
import "../Api"
import "../Common"
import "fmt"

type CmdSensorsLast struct {
}

func NewCmdSensorsLast() ( *CmdSensorsLast ) {
    this := &CmdSensorsLast {  }
    return this
}

func ( this* CmdSensorsLast ) HandleCommand( cmdCtx cmdprocessor.CommandCtxIf ) ( bool ) {
  cmdCtx.HideUserCommand()

  if api.SensorsHistory.Len() == 0 {
    cmdCtx.ReplyNoCitation( "No data" )
    return true
  }

  // Prev() because we need to compensate Next() call in data appending procedure
  val := api.SensorsHistory.Prev().Value
  if val == nil {
    cmdCtx.ReplyNoCitation( "No data" )
    return true
  }

  data := val.(common.SensorData)
  cmdCtx.ReplyNoCitation( fmt.Sprintf(
    "%s\n    üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.2f¬∞C\n    üíß –û—Ç–Ω–æ—Å.–≤–ª–∞–∂–Ω–æ—Å—Ç—å: %.2f%%\n    ‚è± –ê—Ç–º.–¥–∞–≤–ª–µ–Ω–∏–µ: %.2f –º–º —Ä—Ç.—Å—Ç.\n",
    data.Timestamp.String(), data.Temperature, data.Humidity, data.Pressure ) )

  return true
}
